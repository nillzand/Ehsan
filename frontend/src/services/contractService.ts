// frontend/src/services/contractService.ts
import api from '@/lib/api';
import { Contract } from '@/types';

// Omit fields that are read-only or auto-generated by the backend
export type CreateContractPayload = Omit<Contract, 'id' | 'company_name' | 'created_at'>;
export type UpdateContractPayload = Partial<CreateContractPayload>;

/**
 * Fetches all contracts (Super Admin only).
 */
export const getContracts = async (): Promise<Contract[]> => {
    const response = await api.get('/admin/contracts/');
    return response.data;
};

/**
 * Fetches a single contract by its ID for editing.
 */
export const getContractById = async (id: number): Promise<Contract> => {
    const response = await api.get(`/admin/contracts/${id}/`);
    return response.data;
};

/**
 * Creates a new contract (Super Admin only).
 */
export const createContract = async (payload: CreateContractPayload): Promise<Contract> => {
    const response = await api.post('/admin/contracts/', payload);
    return response.data;
};

/**
 * Updates an existing contract (Super Admin only).
 * Uses PATCH for partial updates.
 */
export const updateContract = async (id: number, payload: UpdateContractPayload): Promise<Contract> => {
    const response = await api.patch(`/admin/contracts/${id}/`, payload);
    return response.data;
};

/**
 * Deletes a contract (Super Admin only).
 */
export const deleteContract = async (id: number): Promise<void> => {
    await api.delete(`/admin/contracts/${id}/`);
};